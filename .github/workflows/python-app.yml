name: Python BMI-sekolahmu-Staging application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
#set environment variables 
env:
  HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
  APP_NAME: ${{ 'staging-cicd-sekolahmu' }}

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - run: |
        git fetch --prune --unshallow
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8 # this will check the python code for syntax errors/editing errors
      run: |
          pip install flake8
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest #finally we will want to run our tests
      run: |
        pip install pytest
        pip install pytest-cov
        pytest
    #- name: Add remote origin
      #if: github.ref == 'refs/heads/main' && job.status == 'success' #we specify that this action will ONLY run if everything up to now is successful- so if theres a fail in the tests, then this will not be deployed.
      #run: |
        #git remote add heroku https://heroku:${{ secrets.HEROKU_API_KEY }}@git.heroku.com/${{ secrets.HEROKU_APP_NAME }}.git
        #echo git j
       #Build Docker image
    #- name: Docker build
      #run: docker login --username=_ --password=$HEROKU_API_KEY registry.heroku.com
    #- name: Deploy to Heroku
      #run: |
        #heroku container:push web -a $APP_NAME
        #heroku container:release web -a $APP_NAME

  DeployStaging:
    needs: Build
    if: github.ref == 'refs/heads/main' && job.status == 'success' #we specify that this action will ONLY run if everything up to now is successful- so if theres a fail in the tests, then this will not be deployed.
    steps:
      - name: Deploying to Staging 
        uses: gonuit/heroku-docker-deploy@v1.3.31
        with:
          email: ${{ secrets.HEROKU_EMAIL }}
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
          dockerfile_directory: ./
          dockerfile_name: Dockerfile
          docker_options: "--no-cache"
          process_type: web
    #steps:
      #- name: Docker Login
        #run: docker login --username=_ --password=$HEROKU_API_KEY registry.heroku.com
      #- name: Deploy to Heroku
        #run: |
          #heroku container:push web -a $APP_NAME
      #- name: Release Final
        #run: heroku container:release web -a $APP_NAME
    #name: Deploy to Staging 
    #if: github.event.ref == 'refs/heads/main'
    #needs: [Build]
    #runs-on: ubuntu-latest
    #environment: 
      #name: Staging
      #url: 'https://staging-cicd-sekolahmu.herokuapp.com'
    #steps:
      #- name: Deploy
        #run: echo I am deploying to stagin! 
      #- name: Docker build
        #run: docker login --username=_ --password=$HEROKU_API_KEY registry.heroku.com

      #- name: Deploy to Heroku
        #env:
          #HEROKU_API_KEY: ${{ secrets.HEROKU_API }}
        #run: heroku container:push web -a $APP_NAME
      #- name: Release
        #env:
          #HEROKU_API_KEY: ${{ secrets.HEROKU_API }}
        #run: heroku container:release web -a $APP_NAME

  #DeployProd:
    #name: Deploy to Production 
    #needs: [DeployStaging]
    #runs-on: ubuntu-latest
    #environment: 
      #name: Production
      #url: 'https://cicd-sekolahmu.herokuapp.com/'
    #steps:
      #- name: Deploy
        #run: echo I am deploying to prod! 
